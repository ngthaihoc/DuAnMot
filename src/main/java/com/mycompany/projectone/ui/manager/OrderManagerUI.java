/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.controller.OrderController;
import com.mycompany.projectone.dao.OrderDAO;
import com.mycompany.projectone.dao.OrderDetailDAO;
import com.mycompany.projectone.dao.impl.OrderDAOImpl;
import com.mycompany.projectone.dao.impl.OrderDetailDAOImpl;
import com.mycompany.projectone.entity.Order;
import com.mycompany.projectone.entity.OrderDetail;
import com.mycompany.projectone.util.TimeRange;
import com.mycompany.projectone.util.XDate;
import java.awt.event.ItemEvent;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author WellyOwO
 */
public class OrderManagerUI extends javax.swing.JFrame implements OrderController {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(OrderManagerUI.class.getName());

    /**
     * Creates new form BillManageUI
     */
    public OrderManagerUI() {
        initComponents();
        fillOrderDetails();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsBills = new javax.swing.JTabbedPane();
        pblDanhSach = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDate = new javax.swing.JTable();
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        lblBegin = new javax.swing.JLabel();
        txtBegin = new javax.swing.JTextField();
        lblEnd = new javax.swing.JLabel();
        txtEnd = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        cboTimeRanges = new javax.swing.JComboBox<>();
        pnlBieuMau = new javax.swing.JPanel();
        lblMaHoaDon = new javax.swing.JLabel();
        txtMaHoaDon = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDetails = new javax.swing.JTable();
        btnFilterByOrderID = new javax.swing.JButton();
        btnMoveFirst = new javax.swing.JButton();
        btnMovePrevious = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblDate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hoá đơn ", "Nhân viên", "Khách hàng", "Ngày lập", "Phương thức thanh toán", "Khuyến mãi", "Tổng cộng", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDate.setRowHeight(25);
        tblDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDateMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDate);

        btnCheckAll.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        btnUncheckAll.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnDeleteCheckedItems.setText("Xóa các mục chọn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });

        lblBegin.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lblBegin.setText("Từ ngày");

        txtBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBeginActionPerformed(evt);
            }
        });

        lblEnd.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lblEnd.setText("Đến ngày:");

        btnFilter.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        cboTimeRanges.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cboTimeRanges.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm Nay", "Tuần Này", "Tháng Này", "Quý Này", "Năm Nay", " " }));
        cboTimeRanges.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTimeRangesItemStateChanged(evt);
            }
        });
        cboTimeRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimeRangesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pblDanhSachLayout = new javax.swing.GroupLayout(pblDanhSach);
        pblDanhSach.setLayout(pblDanhSachLayout);
        pblDanhSachLayout.setHorizontalGroup(
            pblDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblDanhSachLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCheckAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUncheckAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteCheckedItems)
                .addGap(49, 49, 49))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pblDanhSachLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(lblBegin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBegin, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(lblEnd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 283, Short.MAX_VALUE)
                .addComponent(btnFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboTimeRanges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        pblDanhSachLayout.setVerticalGroup(
            pblDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblDanhSachLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(pblDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBegin)
                    .addComponent(txtBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEnd)
                    .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter)
                    .addComponent(cboTimeRanges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pblDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckAll)
                    .addComponent(btnUncheckAll)
                    .addComponent(btnDeleteCheckedItems))
                .addGap(15, 15, 15))
        );

        tabsBills.addTab("Tra cứu lịch sử hoá đơn", pblDanhSach);

        lblMaHoaDon.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lblMaHoaDon.setText("Mã hoá đơn");

        txtMaHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaHoaDonActionPerformed(evt);
            }
        });

        btnCreate.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/add.png"))); // NOI18N
        btnCreate.setText("Tạo mới");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/up.png"))); // NOI18N
        btnUpdate.setText("Cập Nhập");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/delete.png"))); // NOI18N
        btnDelete.setText("Xoá");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/refresh.png"))); // NOI18N
        btnClear.setText("Nhập mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        tblDetails.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên sách", "Thể loại", "Số lượng", "Đơn giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDetails);

        btnFilterByOrderID.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        btnFilterByOrderID.setText("Lọc");
        btnFilterByOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterByOrderIDActionPerformed(evt);
            }
        });

        btnMoveFirst.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnMoveFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/MoveFirst.png"))); // NOI18N
        btnMoveFirst.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMoveFirst.setFocusPainted(false);
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        btnMovePrevious.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnMovePrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/MovePrevious.png"))); // NOI18N
        btnMovePrevious.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMovePrevious.setFocusPainted(false);
        btnMovePrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePreviousActionPerformed(evt);
            }
        });

        btnMoveNext.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnMoveNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/MoveNext.png"))); // NOI18N
        btnMoveNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMoveNext.setFocusPainted(false);
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });

        btnMoveLast.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnMoveLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/projectone/icons/MoveLast.png"))); // NOI18N
        btnMoveLast.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMoveLast.setFocusPainted(false);
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBieuMauLayout = new javax.swing.GroupLayout(pnlBieuMau);
        pnlBieuMau.setLayout(pnlBieuMauLayout);
        pnlBieuMauLayout.setHorizontalGroup(
            pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBieuMauLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addComponent(lblMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addComponent(txtMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFilterByOrderID)
                        .addGap(169, 169, 169))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBieuMauLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addGap(18, 18, 18)
                .addComponent(btnMoveFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMovePrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMoveNext, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMoveLast, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 98, Short.MAX_VALUE))
            .addGroup(pnlBieuMauLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        pnlBieuMauLayout.setVerticalGroup(
            pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBieuMauLayout.createSequentialGroup()
                .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnMoveLast)
                            .addComponent(btnMoveNext)
                            .addComponent(btnMovePrevious)
                            .addComponent(btnMoveFirst)))
                    .addGroup(pnlBieuMauLayout.createSequentialGroup()
                        .addComponent(lblMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFilterByOrderID))
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlBieuMauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCreate)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete)
                            .addComponent(btnClear))))
                .addContainerGap())
        );

        tabsBills.addTab("Chi tiết hoá đơn", pnlBieuMau);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabsBills)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabsBills)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDate.getModel();
    for (int i = 0; i < model.getRowCount(); i++) {
        model.setValueAt(true, i, 7);
    }
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) tblDate.getModel();
    for (int i = 0; i < model.getRowCount(); i++) {
        model.setValueAt(false, i, 7);
    }
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDate.getModel();
    for (int i = model.getRowCount() - 1; i >= 0; i--) {
        Boolean isChecked = (Boolean) model.getValueAt(i, 7);
        if (isChecked != null && isChecked) {
            Integer orderId = (Integer) model.getValueAt(i, 0);
            dao.deleteById(orderId);
            model.removeRow(i);
        }
    }
    JOptionPane.showMessageDialog(this, "Đã xóa các hóa đơn được chọn", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    private void txtBeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBeginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBeginActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
                this.fillToTable();
    }//GEN-LAST:event_btnFilterActionPerformed

    private void cboTimeRangesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTimeRangesItemStateChanged
        // TODO add your handling code here:
          if (evt.getStateChange() == ItemEvent.SELECTED) {
            selectTimeRange();
        }
    }//GEN-LAST:event_cboTimeRangesItemStateChanged

    private void tblDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDateMouseClicked
        // TODO add your handling code here:
   if (evt.getClickCount() == 2) {
        int selectedRow = tblDate.getSelectedRow();
        if (selectedRow >= 0) {
            Integer orderId = (Integer) tblDate.getValueAt(selectedRow, 0);
            currentOrderIndex = orderIds.indexOf(orderId);
            tabsBills.setSelectedIndex(1);
            showOrderById(orderId);
        }
    }
    }//GEN-LAST:event_tblDateMouseClicked

    private void cboTimeRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimeRangesActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cboTimeRangesActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        // TODO add your handling code here:
     this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        // TODO add your handling code here:
         this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMovePreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePreviousActionPerformed
        // TODO add your handling code here:
      this.movePrevious();
    }//GEN-LAST:event_btnMovePreviousActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        // TODO add your handling code here:
         this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnFilterByOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterByOrderIDActionPerformed

            try {

        String orderIdText = txtMaHoaDon.getText().trim();

        if (orderIdText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã hóa đơn", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }    

        fillOrderDetails();
        
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Mã hóa đơn phải là số nguyên", "Lỗi", JOptionPane.ERROR_MESSAGE);
        txtMaHoaDon.requestFocus();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm hóa đơn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnFilterByOrderIDActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateActionPerformed

    private void txtMaHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaHoaDonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaHoaDonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new OrderManagerUI().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFilterByOrderID;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrevious;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboTimeRanges;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBegin;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblMaHoaDon;
    private javax.swing.JPanel pblDanhSach;
    private javax.swing.JPanel pnlBieuMau;
    private javax.swing.JTabbedPane tabsBills;
    private javax.swing.JTable tblDate;
    private javax.swing.JTable tblDetails;
    private javax.swing.JTextField txtBegin;
    private javax.swing.JTextField txtEnd;
    private javax.swing.JTextField txtMaHoaDon;
    // End of variables declaration//GEN-END:variables
     
      OrderDAO dao = new OrderDAOImpl();
      OrderDetailDAO daoDetail = new OrderDetailDAOImpl();
      List <Order> items = List.of();
      List <OrderDetail> itemsDetail = List.of();
      private List<Integer> orderIds = new ArrayList<>(); 
private int currentOrderIndex = -1; 
      
private void showOrderById(int orderId) {
    txtMaHoaDon.setText(String.valueOf(orderId));
    fillOrderDetails();
}
              
              
    @Override
    public void open() {
    }

    @Override
    public void setForm(Order entity) {
        
    }

    @Override
    public Order getForm() {
        return null;
    }

@Override
public void fillToTable() {
    DefaultTableModel model = (DefaultTableModel) tblDate.getModel();
    model.setRowCount(0);
    Date begin = XDate.parse(txtBegin.getText(), "dd/MM/yyyy");
    Date end = XDate.parse(txtEnd.getText(), "dd/MM/yyyy");
    items = dao.findByTimeRange(begin, end);
   
    orderIds.clear();
    items.forEach(item -> {
        orderIds.add(item.getOrderID());
        Object[] data = {
            item.getOrderID(),
            item.getEmployeeName(),
            item.getCustomerName(),
            item.getOrderDate(),
            item.getPaymentMethod(),
            item.getPromoTitle(),
            item.getTotalAmount()
        };
        model.addRow(data);
    });
    
    if (!orderIds.isEmpty()) {
        currentOrderIndex = 0;
    }
}

    @Override
    public void edit() {
    }

    @Override
    public void create() {
    }

    @Override
    public void update() {
    }

  @Override
public void delete() {
    int selectedRow = tblDate.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để xóa", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa hóa đơn này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        Integer orderId = (Integer) tblDate.getValueAt(selectedRow, 0);
        dao.deleteById(orderId);
        fillToTable();
        JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }
}

   @Override
public void clear() {
    txtMaHoaDon.setText("");
    DefaultTableModel model = (DefaultTableModel) tblDetails.getModel();
    model.setRowCount(0);
}

    @Override
    public void setEditable(boolean editable) {
    }

    @Override
    public void checkAll() {
    }

    @Override
    public void uncheckAll() {
    }

    @Override
    public void deleteCheckedItems() {
    }

   @Override
public void moveFirst() {
     if (!orderIds.isEmpty()) {
        currentOrderIndex = 0;
        showOrderById(orderIds.get(currentOrderIndex));
    }
}

  @Override
public void movePrevious() {
   if (!orderIds.isEmpty() && currentOrderIndex > 0) {
        currentOrderIndex--;
        showOrderById(orderIds.get(currentOrderIndex));
    }
}
   @Override
public void moveNext() {
     if (!orderIds.isEmpty() && currentOrderIndex < orderIds.size() - 1) {
        currentOrderIndex++;
        showOrderById(orderIds.get(currentOrderIndex));
    }
}

@Override
public void moveLast() {
     if (!orderIds.isEmpty()) {
        currentOrderIndex = orderIds.size() - 1;
        showOrderById(orderIds.get(currentOrderIndex));
    }
}

  @Override
public void moveTo(int rowIndex) {
    if (rowIndex >= 0 && rowIndex < tblDetails.getRowCount()) {
        tblDetails.setRowSelectionInterval(rowIndex, rowIndex);
        tblDetails.scrollRectToVisible(tblDetails.getCellRect(rowIndex, 0, true));
    }
}

@Override
public void fillOrderDetails() {
    DefaultTableModel model = (DefaultTableModel) tblDetails.getModel();
    model.setRowCount(0);
    String orderIdText = txtMaHoaDon.getText().trim();
    if (orderIdText.isEmpty()) {
        return; 
    }
    
    try {
        itemsDetail = daoDetail.findByOrderId(Integer.parseInt(orderIdText));
        itemsDetail.forEach(item -> {
            Object[] row = {
                item.getNameBook(),
                item.getCategory(),
                item.getQuantity(),
                item.getTotalAmount()
            };
            model.addRow(row);
        });
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Mã hóa đơn phải là số nguyên", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}

    @Override
    public void selectTimeRange() {
         TimeRange range = TimeRange.today();
        switch (cboTimeRanges.getSelectedIndex()) {
            case 0 ->
                range = TimeRange.today();
            case 1 ->
                range = TimeRange.thisWeek();
            case 2 ->
                range = TimeRange.thisMonth();
            case 3 ->
                range = TimeRange.thisQuarter();
            case 4 ->
                range = TimeRange.thisYear();
        }
        try {
            Date beginDate = Date.from(range.getBegin().atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date endDate = Date.from(range.getEnd().atStartOfDay(ZoneId.systemDefault()).toInstant());
            txtBegin.setText(XDate.format(beginDate, "dd/MM/yyyy"));
            txtEnd.setText(XDate.format(endDate, "dd/MM/yyyy"));
        } catch (Exception e) {
             JOptionPane.showMessageDialog(this, "Lỗi định dạng ngày: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtBegin.setText("");
            txtEnd.setText("");
        }
        this.fillToTable();
        
        
    }
}
